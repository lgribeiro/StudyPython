

import re

def le_assinatura():
  '''A funcao le os valores dos tracos linguisticos do modelo e devolve uma 
      assinatura a ser comparada com os textos fornecidos'''
  
  print("Bem-vindo ao detector automático de COH-PIAH.")
  wal = float(input("Entre o tamanho medio de palavra:"))
  ttr = float(input("Entre a relação Type-Token:"))
  hlr = float(input("Entre a Razão Hapax Legomana:"))
  sal = float(input("Entre o tamanho médio de sentença:"))
  sac = float(input("Entre a complexidade média da sentença:"))
  pal = float(input("Entre o tamanho medio de frase:"))
    
  return [wal, ttr, hlr, sal, sac, pal]
  

def le_textos():
    i = 1
    textos = []
    texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")

    return textos

def separa_sentencas(texto):
    '''A funcao recebe um texto e devolve uma lista das sentencas dentro do texto'''
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    return sentencas

def separa_frases(sentenca):
    '''A funcao recebe uma sentenca e devolve uma lista das frases dentro da sentenca'''
    return re.split(r'[,:;]+', sentenca)

def separa_palavras(frase):
    '''A funcao recebe uma frase e devolve uma lista das palavras dentro da frase'''
    return frase.split()

def n_palavras_unicas(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras que aparecem uma unica vez'''
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas

def n_palavras_diferentes(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras diferentes utilizadas'''
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)

def compara_assinatura(as_a, as_b):
    '''IMPLEMENTAR. Essa funcao recebe duas assinaturas de texto e deve devolver o grau de similaridade nas assinaturas.'''
    sim = 0
    for i in range(0,6):
        sim += abs(as_a[i] - as_b[i])
    sim = sim / 6
    
    return sim
    

def calcula_assinatura(texto):
    '''IMPLEMENTAR. Essa funcao recebe um texto e deve devolver a assinatura do texto.'''
    
    '''tamanho medio de palavra: 4.79
        relação Type-Token: 0.72
        Razão Hapax Legomana: 0.56
        tamanho médio de sentença: 80.5
        complexidade média da sentença: 2.5
        tamanho medio de frase: 31.6
        achar a soma de caracteres , tanto de sentença qto de frase
        achar total numero de frase e numero total  de sentença'''
    
    total_sentencas = 0 
    soma_sentencas = 0
    total_frases = 0 
    soma_frases = 0
    soma_palavras = 0
    frases = []
    medio_sentencas = 0
    medio_frases= 0
    complex_sentenca = 0
    total_palavras = 0
    palavras = []
    palavra = []
    Token = 0 
    Hapax = 0 
    
        
    sentencas = separa_sentencas(texto)
    
    ''' escrever'''
    for i in sentencas:
        soma_sentencas += int(len(i))    # qtos caracteres tem na sentença  
        frase = separa_frases(i)
        for l in frase:
            frases.append(l)
        
    for j in frases:
        soma_frases += int(len(j))
        umafrase = j
        palavra = separa_palavras(umafrase)
        for m in palavra:
            palavras.append(m)
        
       
    
    for k in palavras:
        soma_palavras += int(len(k))
                    
    total_sentencas = len(sentencas)    
    total_frases = len(frases)
    total_palavras = len(palavras) 
    
    medio_palavras = soma_palavras/total_palavras     #wal
    Token = n_palavras_diferentes(palavras) / total_palavras
    Hapax = n_palavras_unicas(palavras) / total_palavras
    medio_sentencas = soma_sentencas/total_sentencas  #sal    
    complex_sentenca = total_frases / total_sentencas #sac
    medio_frases = soma_frases/total_frases           #pal
    
    #[wal, ttr, hlr, sal, sac, pal]
    return [medio_palavras, Token, Hapax, medio_sentencas,complex_sentenca, medio_frases]

def avalia_textos(textos, ass_cp):
    '''IMPLEMENTAR. Essa funcao recebe uma lista de textos e deve devolver o numero (1 a n) do texto com maior probabilidade de ter sido infectado por COH-PIAH.'''
    qtde_textos = int(len(textos))
    
    as_b = []
    num = []
    #assinatura = []
    copia = 0
    for i in range(0,qtde_textos):
        as_b = calcula_assinatura(textos[i])
        #assinatura.append(as_b)
        num.append(compara_assinatura(ass_cp, as_b))
                 
    copia = num.index(min(num))                               
                                                                                    
    return (int(copia) + 1)

def main_loop():
    """ Find out what the user wants to do next. """
    
    print()
    ass_cp = []
    textos = []
    ass_cp = le_assinatura()
    textos = le_textos()
    autor = avalia_textos(textos, ass_cp)
    print("O autor do texto", autor ,"está infectado com COH-PIAH")
    

main_loop()
